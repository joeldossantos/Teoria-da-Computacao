import tc.glc as glc

# Implementação de testes da função rmd (tarefa 23)
# Aluna: Bruna Eduarda Rigueira Capistrano


def test_rmd():
    
    assert glc.rmd(({'X'}, 
                    {'a', '+', '*'}, 
                    {('X', ('X', '+', 'X')), ('X', ('X', '*', 'X')), ('X', ('X')), ('X', ('a'))}, 
                    'X'),
                   ['a', '+', 'a', '*', 'a']) == "X => X*X => X*a => X+X*a => X+a*a => a+a*a"
    
    assert glc.rmd(({'A', 'B'}, 
                    {0, 1, '#'}, 
                    {('A', (0, 1, 'A')), ('A', ('B', 0, 0)), ('B', ('#'))}, 
                    'A'),
                   [0, 1, '#', 0, 0]) == "A => 01A => 01B00 => 01#00"

    assert glc.rmd(({'S'}, 
                    {1, '+', 'a'}, 
                    {('S', ('S', '+', 'S')), ('S', (1)), ('S', ('a'))}, 
                    'S'), 
                   [1, '+', 1, '+', 'a']) == "S => S+S => S+a => S+S+a => S+1+a => 1+1+a"

    assert glc.rmd(({'E'}, 
                    {'a', 'b', '+', '-'}, 
                    {('E', ('E', '+', 'E')), ('E', ('E', '-', 'E')), ('E', ('a')), ('E', ('b'))}, 
                    'E'), 
                   ['a', '-', 'b', '+', 'a']) == "E => E-E => E-E+E => E-E+a => E-b+a => a-b+a"
    
    assert glc.rmd(({'A', 'B', 'S'}, 
                    {'a', 'b', ''}, 
                    {('S', ('A', 'B')), ('S', ('')), ('A', ('a', 'B')), ('B', ('S', 'b'))}, 
                    'S'), 
                   ['a', 'b', 'b']) == "S => AB => ASb => Ab => aBb => aSbb => abb"
    
    assert glc.rmd(({'A', 'B', 'S'}, 
                    {'a', 'b'}, 
                    {('S', ('a', 'B')), ('S', ('b', 'A')), ('S', ('a', 'S')), ('S', ('b', 'A', 'A')), 
                     ('S', ('a')), ('S', ('b')), ('S', ('b', 'S')), ('S', ('a', 'B', 'B'))}, 
                    'S'), 
                   ['a', 'a','b', 'b', 'a', 'b', 'b', 'a']) == "S => aB => aaBB => aaBbS => aaBbbA => aaBbba => aabAbba => aabbAbba => aabbabba"
    
    assert glc.rmd(({'A', 'B', 'S'}, 
                    {0, 1, ''}, 
                    {('S', ('A', 1, 'B')), ('A', (0, 'A')), ('A', ('')), ('B', (0, 'B')), 
                     ('B', (1, 'B')), ('B', (''))}, 
                    'S'), 
                   [0, 0, 1, 0, 1]) == "S => A1B => A10B => A101B => A101 => 0A101 => 00A101 => 00101"
    
    assert glc.rmd(({'S', '(', ')'}, 
                    {'(', ')', ''}, 
                    {('S', ('(', 'S', ')')), ('S', ('S', 'S')), ('S', (''))}, 
                    'S'), 
                   ['(', '(', ')', '(', ')', ')']) == "S => (S) => (SS) => (S(S)) => (S()) => ((S)()) => (()())"
    
    assert glc.rmd(({'S', 'A', 'B'}, 
                    {'a', 'b', 'c', ''}, 
                    {('S', ('A', 'B')), ('A', ('')), ('A', ('a', 'A')), ('B', ('b', 'B', 'c')), ('B', (''))}, 
                    'S'), 
                   ['a', 'b', 'b', 'c', 'c']) == "S => AB => AbBc => AbbBcc => Abbcc => abbcc"
    
    
    assert glc.rmd(({'S', 'A'}, 
                    {'a', 'b', '&'}, 
                    {('S', ('S', '&', 'S')), ('S', ('A')), ('A', ('a')), ('A', ('b'))}, 
                    'S'), 
                   ['a', '&', 'b']) == "S => S&S => S&A => S&b => A&b => a&b"